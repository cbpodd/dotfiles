" Vundle --------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=$HOME/.vim/bundle/Vundle.vim
call vundle#begin()
" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Plugins-----------------------------------------------
Plugin 'PProvost/vim-ps1' " Powershell Syntax
Plugin 'mattn/emmet-vim' " HTML5 snippets
Plugin 'sheerun/vim-polyglot' " Language Packs
Plugin 'davidhalter/jedi-vim' " Python Autocomplete
" All of your Plugins must be added before the following line
call vundle#end() 
filetype plugin on

" UI Config ----------------------------------------------------
set encoding=utf-8
" set background=dark
set number relativenumber " show line numbers
set ruler                 " Show ruler on bottom
set showcmd               " show command in bottom bar
filetype indent on        " load filetype-specific indent files
set wildmenu              " visual autocomplete for command menu
set guioptions+=e
set showtabline=2
set guifont=Fixedsys:h10
syntax enable           " enable syntax processing
set mouse=a
if has('win32')
    set term=win32
else
    set term=xterm-256color
endif

" Tabzz -------------------------------------------------
" Whitespace.
" Spaces instead of tabs.
set expandtab
" How many columns a tab counts for.
set tabstop=4
" How many columns vim uses when you hit Tab in insert mode.
set softtabstop=4
" How many columns of text is indented with <<, >>, and cindent.
set shiftwidth=4
set backspace=indent,eol,start
set smarttab
set autoindent
set cindent

" Backup, Swap, Undo Directories -------------------------------
set backupdir=$HOME/.vim/tmp/backups//
set directory=$HOME/.vim/tmp/swapfiles//
set undodir=$HOME/.vim/tmp/undofiles//
set undofile

" Optimizations ----------------------------------------
set lazyredraw          " redraw only when we need to

" Search ---------------------------------------------------
set incsearch           " search as characters are entered

" Folding ----------------------------------------
set foldenable          " enable folding
set foldlevelstart=3   " open most folds by default
set foldmethod=indent   " fold based on indent level
set foldignore=

" Leader Remappings --------------------------------
let mapleader = ","

" Map [] space to add new line inplace -----------------------
nnoremap <silent> [<space>  :<c-u>put!=repeat([''],v:count)<bar>']+1<cr>
nnoremap <silent> ]<space>  :<c-u>put =repeat([''],v:count)<bar>'[-1<cr>

" File Specific Settings ---------------------------------------
augroup configgroup
    autocmd!
    autocmd VimEnter * highlight clear SignColumn
    autocmd FileType java setlocal noexpandtab
    autocmd FileType java setlocal list
    autocmd FileType java setlocal listchars=tab:+\ ,eol:-
    autocmd FileType java setlocal formatprg=par\ -w80\ -T4
    autocmd FileType python setlocal commentstring=#\ %s
    autocmd BufEnter Makefile setlocal noexpandtab
    autocmd FileType markdown setlocal spell spelllang=en_us
    autocmd FileType text setlocal spell spelllang=en_us
    autocmd BufNewFile,BufRead *.vcxproj setlocal syntax=xml
    autocmd BufNewFile,BufRead *.csproj setlocal syntax=xml
augroup END

" Emmet Vim -------------------------------------
" ,, after typing in emmet snippet will fill it
" See https://docs.emmet.io for mappings
let g:user_emmet_leader_key='<leader>'

" Tabs ------------------------------------------
nnoremap T :tabnew 
nnoremap J :tabp<CR>
nnoremap K :tabn<CR>

" Do what plugins Do Talk -----------------------

" Fuzzy File Searching --------------------------
" Always open your vim at the root of your project
" Allow fuzzy file searching using :find
set path+=**
set wildignore+=**/node_modules/**

" Tags with ctags -------------------------------
" Run this command when entering a workspace
" C-] jumps you down tag stack
" gC-] jumps you down an ambiguous tag
" :pop jumps you up a tag stack
command! MakeTags !ctags -R .

" Autocomplete ---------------------------------
" Included in vim, doesn't need any configuration
" C-xC-n for JUST this file
" C-xC-f for filenames
" C-xC-] for tags
" C-n for default complete
" Use C-n and C-p to go through options

" File Browsing --------------------------------
" Tweaks for browsing
let g:netrw_banner=0        " Disable banner
let g:netrw_browse_split=4  " Open in prior windows
let g:netrw_altv=1          " Open splits to the right
let g:netrw_liststyle=3     " tree view
let g:netrw_list_hide=netrw_gitignore#Hide()
let g:netrw_list_hide.=',\(^\|\s\s\)\zs\.\S\+'

" Now we can:
" - :edit a folder to open file browser
" - <CR>/v/t to open in an h-split/v-split/tab
" - check |netrw-browser-maps| for more mappings

" Snippets ------------------------------------
" Each of these is a custom command that reads
" in an external file snippet, and puts it in 
" where you would like it

" Read in empty HTML template, move cursor to title
nnoremap <leader>html :-1read $HOME/.vim/snippets/empty.html<CR>4jwf>a

" Build Integration ---------------------------
" Vim has internal `make` command, only needs
" to be run
" Spaces must be escaped
" set makeprg=mvn\ exec:java

" Run :make to run the make command
" If the output is formatted in Quickfix Format,
" can use the following commands to work with errors:
" - :cl to list errors
" - :cc# to jump to error by number
" - :cn and :cp to navigate forward and back

" Copy and Pasting ---------------------------
" "'letter'd cuts stuff into register 'letter'
" "'letter'p pastes stuff from register 'letter'
" "'letter'y Copies stuff into register 'letter'
" 'letter' + is system clipboard
vnoremap <C-x> "+d
nnoremap <C-x> ^v$"+d
vnoremap <C-c> "+y
nnoremap <C-c> ^v$"+y
noremap <C-v> "+p
